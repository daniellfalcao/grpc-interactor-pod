//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: test.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `TestPack_TestServiceClient`, then call methods of this protocol to make API calls.
internal protocol TestPack_TestServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: TestPack_TestServiceClientInterceptorFactoryProtocol? { get }

  func testSimpleCallWithErrorResponse(
    _ request: TestPack_SimpleCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TestPack_SimpleCallRequest, TestPack_SimpleCallResponse>

  func testSimpleCallWithEmptyResponse(
    _ request: TestPack_SimpleCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TestPack_SimpleCallRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func testSimpleCallWithResponse(
    _ request: TestPack_SimpleCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TestPack_SimpleCallRequest, TestPack_SimpleCallResponse>

  func testSimpleCallWithStreamResponse(
    _ request: TestPack_SimpleCallRequest,
    callOptions: CallOptions?,
    handler: @escaping (TestPack_SimpleCallResponseStream) -> Void
  ) -> ServerStreamingCall<TestPack_SimpleCallRequest, TestPack_SimpleCallResponseStream>

  func testStreamCallAndStreamResponse(
    callOptions: CallOptions?,
    handler: @escaping (TestPack_SimpleCallResponseStream) -> Void
  ) -> BidirectionalStreamingCall<TestPack_SimpleCallRequestStream, TestPack_SimpleCallResponseStream>
}

extension TestPack_TestServiceClientProtocol {
  internal var serviceName: String {
    return "test_pack.TestService"
  }

  /// Unary call to testSimpleCallWithErrorResponse
  ///
  /// - Parameters:
  ///   - request: Request to send to testSimpleCallWithErrorResponse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func testSimpleCallWithErrorResponse(
    _ request: TestPack_SimpleCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TestPack_SimpleCallRequest, TestPack_SimpleCallResponse> {
    return self.makeUnaryCall(
      path: "/test_pack.TestService/testSimpleCallWithErrorResponse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestSimpleCallWithErrorResponseInterceptors() ?? []
    )
  }

  /// Unary call to testSimpleCallWithEmptyResponse
  ///
  /// - Parameters:
  ///   - request: Request to send to testSimpleCallWithEmptyResponse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func testSimpleCallWithEmptyResponse(
    _ request: TestPack_SimpleCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TestPack_SimpleCallRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/test_pack.TestService/testSimpleCallWithEmptyResponse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestSimpleCallWithEmptyResponseInterceptors() ?? []
    )
  }

  /// Unary call to testSimpleCallWithResponse
  ///
  /// - Parameters:
  ///   - request: Request to send to testSimpleCallWithResponse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func testSimpleCallWithResponse(
    _ request: TestPack_SimpleCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TestPack_SimpleCallRequest, TestPack_SimpleCallResponse> {
    return self.makeUnaryCall(
      path: "/test_pack.TestService/testSimpleCallWithResponse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestSimpleCallWithResponseInterceptors() ?? []
    )
  }

  /// Server streaming call to testSimpleCallWithStreamResponse
  ///
  /// - Parameters:
  ///   - request: Request to send to testSimpleCallWithStreamResponse.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func testSimpleCallWithStreamResponse(
    _ request: TestPack_SimpleCallRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (TestPack_SimpleCallResponseStream) -> Void
  ) -> ServerStreamingCall<TestPack_SimpleCallRequest, TestPack_SimpleCallResponseStream> {
    return self.makeServerStreamingCall(
      path: "/test_pack.TestService/testSimpleCallWithStreamResponse",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestSimpleCallWithStreamResponseInterceptors() ?? [],
      handler: handler
    )
  }

  /// Bidirectional streaming call to testStreamCallAndStreamResponse
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func testStreamCallAndStreamResponse(
    callOptions: CallOptions? = nil,
    handler: @escaping (TestPack_SimpleCallResponseStream) -> Void
  ) -> BidirectionalStreamingCall<TestPack_SimpleCallRequestStream, TestPack_SimpleCallResponseStream> {
    return self.makeBidirectionalStreamingCall(
      path: "/test_pack.TestService/testStreamCallAndStreamResponse",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.maketestStreamCallAndStreamResponseInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol TestPack_TestServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'testSimpleCallWithErrorResponse'.
  func maketestSimpleCallWithErrorResponseInterceptors() -> [ClientInterceptor<TestPack_SimpleCallRequest, TestPack_SimpleCallResponse>]

  /// - Returns: Interceptors to use when invoking 'testSimpleCallWithEmptyResponse'.
  func maketestSimpleCallWithEmptyResponseInterceptors() -> [ClientInterceptor<TestPack_SimpleCallRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'testSimpleCallWithResponse'.
  func maketestSimpleCallWithResponseInterceptors() -> [ClientInterceptor<TestPack_SimpleCallRequest, TestPack_SimpleCallResponse>]

  /// - Returns: Interceptors to use when invoking 'testSimpleCallWithStreamResponse'.
  func maketestSimpleCallWithStreamResponseInterceptors() -> [ClientInterceptor<TestPack_SimpleCallRequest, TestPack_SimpleCallResponseStream>]

  /// - Returns: Interceptors to use when invoking 'testStreamCallAndStreamResponse'.
  func maketestStreamCallAndStreamResponseInterceptors() -> [ClientInterceptor<TestPack_SimpleCallRequestStream, TestPack_SimpleCallResponseStream>]
}

internal final class TestPack_TestServiceClient: TestPack_TestServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: TestPack_TestServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the test_pack.TestService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: TestPack_TestServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

